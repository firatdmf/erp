# Generated by custom migration
import django.contrib.postgres.fields
from django.db import migrations, models


def convert_to_arrays(apps, schema_editor):
    """Convert existing email and phone strings to single-item arrays"""
    Company = apps.get_model('crm', 'Company')
    db_alias = schema_editor.connection.alias
    
    for company in Company.objects.using(db_alias).all():
        # Convert email string to array
        if company.email:
            company.email_temp = [company.email]
        else:
            company.email_temp = []
        
        # Convert phone string to array
        if company.phone:
            company.phone_temp = [company.phone]
        else:
            company.phone_temp = []
        
        company.save()


def reverse_to_strings(apps, schema_editor):
    """Reverse: Convert arrays back to strings (take first item)"""
    Company = apps.get_model('crm', 'Company')
    db_alias = schema_editor.connection.alias
    
    for company in Company.objects.using(db_alias).all():
        # Convert email array to string
        if company.email_temp:
            company.email = company.email_temp[0]
        else:
            company.email = ''
        
        # Convert phone array to string
        if company.phone_temp:
            company.phone = company.phone_temp[0]
        else:
            company.phone = ''
        
        company.save()


class Migration(migrations.Migration):

    dependencies = [
        ('crm', '0015_companyfollowup'),
    ]

    operations = [
        # Step 1: Add temporary array fields
        migrations.AddField(
            model_name='company',
            name='email_temp',
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.EmailField(max_length=254),
                blank=True,
                default=list,
                size=None,
                verbose_name='Email addresses'
            ),
        ),
        migrations.AddField(
            model_name='company',
            name='phone_temp',
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.CharField(max_length=20),
                blank=True,
                default=list,
                size=None,
                verbose_name='Phone numbers'
            ),
        ),
        
        # Step 2: Migrate data from old fields to temp fields
        migrations.RunPython(convert_to_arrays, reverse_to_strings),
        
        # Step 3: Remove old fields
        migrations.RemoveField(
            model_name='company',
            name='email',
        ),
        migrations.RemoveField(
            model_name='company',
            name='phone',
        ),
        
        # Step 4: Rename temp fields to original names
        migrations.RenameField(
            model_name='company',
            old_name='email_temp',
            new_name='email',
        ),
        migrations.RenameField(
            model_name='company',
            old_name='phone_temp',
            new_name='phone',
        ),
    ]
