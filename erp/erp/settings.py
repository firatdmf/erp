"""
Django settings for erp project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# below is for loading environment variables for establishing security
# from dotenv import load_dotenv
from decouple import config

# cloud cdn provider
import cloudinary, cloudinary.uploader, cloudinary.api

# load_dotenv()
# print(os.getenv('DATABASE'))
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

ALLOWED_HOSTS = [
    ".vercel.app",
    "erp.demfirat.com",
    "demfirat.com",
    "127.0.0.1",
    "localhost",
    "app.nejum.com",
    "www.nejum.com",
    "nejum.com",
    "erp-2hs3.onrender.com",
    '192.168.1.106',
    '2d0820bfb4f1.ngrok-free.app',
]

# CSRF_TRUSTED_ORIGINS = ['https://*.demfirat.com','https://*.127.0.0.1']
CSRF_TRUSTED_ORIGINS = [
    "https://*.demfirat.com",
    "https://*.vercel.app",
    'https://2d0820bfb4f1.ngrok-free.app',
]

# Below is added for django OAuth
# we may need to change to something else other than 1, but that's for later
# SITE_ID = 1

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "erp",
    "todo",
    "crm",
    "accounting",
    "jquery",
    "authentication",
    "operating",
    "marketing",
    "django_htmx",
    # below is to host images
    "cloudinary",
    "cloudinary_storage",
    # below is for google auth
    # "django.contrib.sites",
    # "allauth",  # this allows us to do other authentications beside the standard one (like google)
    # "allauth.account",
    # "allauth.socialaccount",
    # "allauth.socialaccount.providers.google",
]

# SOCIALACCOUNT_PROVIDERS = {
#     "google": {
#         # this is our credentials
#         "SCOPE": [
#             "profile",
#             "email",
#         ],
#         "AUTH_PARAMS": {
#             "access_type": "online",
#         },
#     }
# }


# Don't know if below does any shit.
# SOCIALACCOUNT_LOGIN_ON_GET = True
# TEMPLATE_CONTEXT_PROCESSORS = [
#     # ...
#     "allauth.socialaccount.context_processors.socialaccount",
#     # ...
# ]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
    # "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = "erp.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # The below helps to put the view function variable global in all templates
                "erp.context_processors.last_five_entities",
            ],
        },
    },
]

# WSGI_APPLICATION = "erp.wsgi.application"
WSGI_APPLICATION = "erp.wsgi.app"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
# DATABASE_URL = 'postgresql://postgres:z5nJKvkJjjrYwgHZZYRz@containers-us-west-99.railway.app:6547/railway'
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


DATABASES = {
    "default": {
        "ENGINE": config("DB_ENGINE"),
        # name of database
        "NAME": config("DB_NAME"),
        # user that created the database, or have access to it
        "USER": config("DB_USER"),
        # user password
        "PASSWORD": config("DB_PASSWORD"),
        "HOST": config("DB_HOST"),  # an empty string means localhost
        "PORT": config("DB_PORT"),
        "TEST": {
            "NAME": "nejum_test",  # test DB
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

# TIME_ZONE = 'UTC'
# TIME_ZONE = "US/Pacific"
TIME_ZONE = "Europe/Istanbul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

# STATIC_URL = '/static/'

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


# Media Files (For user uploaded files (dynamic not static))
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Cloud CDN solution

cloudinary.config(
    cloud_name=config("cloudinary_cloud_name"),
    api_key=config("cloudinary_api_key"),
    api_secret=config("cloudinary_api_secret"),
    secure=True,
)

CLOUDINARY_STORAGE = {
    'CLOUD_NAME': config("cloudinary_cloud_name"),
    'API_KEY': config("cloudinary_api_key"),
    'API_SECRET': config("cloudinary_api_secret"),
}
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'


# specify the URL where Django should redirect unauthenticated users:
# LOGIN_URL = 'login'
# LOGOUT_URL = 'logout'


AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]

if not DEBUG:
    STATIC_ROOT = BASE_DIR / "static"

STATICFILES_DIRS = []


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# AUTHENTICATION_BACKENDS = (
#     # Needed to login by username in Django admin, regardless of 'allauth'
#     "django.contrib.auth.backends.ModelBackend",
#     # Logging in with allauth
#     "allauth.account.auth_backends.AuthenticationBackend",
# )

# LOGIN_REDIRECT_URL = ""
LOGIN_URL = "/authentication/signin"
LOGOUT_REDIRECT_URL = "/authentication/index"
# LOGOUT_REDIRECT_URL = "/"
